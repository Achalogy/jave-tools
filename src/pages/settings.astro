---
import {
  IconCirclePlus,
  IconDownload,
  IconMoon,
  icons,
  IconSun,
  IconTrash,
  IconUpload,
} from "@tabler/icons-react";
import Base from "../layouts/Base.astro";
import SimpleCard from "../components/simpleCard.astro";
import IconListSelector from "../components/iconListSelector.astro";

const themeCookie = Astro.cookies.get("theme")?.value ?? "light";

let clases: {
  name: string;
  id: string;
  url?: string;
  icon?: string;
}[] = JSON.parse(Astro.cookies.get("clases")?.value ?? "[]");

if (Astro.request.method == "POST") {
  const formData = await Astro.request.formData();

  const formName = (formData?.get("form-name") ?? "").toString();

  switch (formName) {
    case "addClass": {
      const name = (formData?.get("name") ?? "").toString();
      const id = (formData?.get("id") ?? "").toString();
      const icon = (formData?.get("selected-icon") ?? "").toString();

      if (!name || !id || !icon) return;

      clases.push({
        name,
        id,
        icon,
      });
      break;
    }

    case "removeClass": {
      const id = (formData?.get("id") ?? "").toString();

      if (!id) return;

      clases = clases.filter((c) => c.id != id);

      break;
    }
  }

  Astro.cookies.set("clases", JSON.stringify(clases), {
    expires: new Date(Date.now() + 10e9),
  });
}
---

<script is:inline>
  function changeTheme() {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; theme=`);
    const theme = parts.pop().split(";").shift();
    const nTheme = theme == "dark" ? "light" : "dark";
    document.cookie = `theme=${nTheme}; expires=${new Date(Date.now() + 10e9).toUTCString()}; path=/`;
    window.location.reload();
  }

  function showForm() {
    const e = document.getElementById("form-addClass");
    e.style.setProperty("display", "flex");
  }

  function hideForm() {
    const e = document.getElementById("form-addClass");
    e.style.setProperty("display", "none");
  }

  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(";").shift();
  }

  function downloadSettings() {
    const clases = JSON.parse(
      decodeURIComponent(getCookie("clases") ?? "[]")
        .replace(/Ã¡/g, "á")
        .replace(/Ã±/g, "ñ")
        .replace(/Ã±/g, "ñ")
        .replace(/Ã©/g, "é")
        .replace(/Ã³/g, "ó")
        .replace(/Ã­/g, "í")
        .replace(/Ãº/g, "ú")
    );

    const themeCookie = getCookie("theme") ?? "light";
    const settings = {
      clases,
      themeCookie,
    };

    const dataStr =
      "data:text/json;charset=utf-8," +
      encodeURIComponent(JSON.stringify(settings));

    const downloadAnchorNode = document.createElement("a");

    downloadAnchorNode.setAttribute("href", dataStr);
    downloadAnchorNode.setAttribute("download", "jave-settings.json");
    document.body.appendChild(downloadAnchorNode); // required for firefox
    downloadAnchorNode.click();
    downloadAnchorNode.remove();
  }

  function importSettings() {
    const e = document.getElementById("import-input");
    const file = e.files[0];

    const reader = new FileReader();

    reader.addEventListener("load", function () {
      var result = JSON.parse(reader.result);

      const { clases, themeCookie } = result;

      document.cookie = `clases=${encodeURIComponent(JSON.stringify(clases))}; expires=${new Date(Date.now() + 10e9).toUTCString()}; path=/`;
      document.cookie = `theme=${themeCookie}; expires=${new Date(Date.now() + 10e9).toUTCString()}; path=/`;
      window.location.reload();
    });

    reader.readAsText(file);
  }
</script>

<Base>
  <div
    class="flex-col xl:flex-row flex gap-2 xl:gap-4 w-full xl:w-2/3 p-4 mx-auto"
  >
    <div class="flex flex-col flex-1 gap-2 xl:gap-4">
      <b>Configuración de la aplicación</b>
      <div
        onclick="changeTheme()"
        class="border dark:border-slate-700 dark:bg-gray-800 rounded p-4 flex gap-2 cursor-pointer select-none"
      >
        <p>
          {themeCookie == "dark" ? <IconSun /> : <IconMoon />}
        </p>
        <p class="font-semibold">
          {
            themeCookie == "dark"
              ? "Cambiar a tema Claro"
              : "Cambiar a tema Oscuro"
          }
        </p>
      </div>
    </div>
    <div class="flex flex-col gap-2 xl:gap-4 flex-[2]">
      <b>Personalizar App</b>
      <SimpleCard>
        <div slot="content" class="flex flex-col gap-2 xl:gap-4 xl:p-1 w-full">
          <b>Lista de materias</b>
          <p>
            Agrega una clase para crear un acceso directo a Campus en la
            <a href="/" class="underline text-sky-400">pantalla inicial</a>, el
            código es el que sale en la url al entrar a la clase en campus.
          </p>
          <p class="text-xs text-gray-500">
            https://campusvirtuallms.javeriana.edu.co/d2l/home/<span
              class="italic text-red-500">acá va el código</span
            >
          </p>
          <div class="flex flex-col gap-2">
            {
              clases.map((c) => {
                const Icon = icons[c.icon];

                return (
                  <form
                    id="form-removeClass"
                    method="post"
                    class="p-2 flex gap-4 items-center justify-between bg-gray-100 dark:bg-gray-900 rounded w-full"
                  >
                    {Icon && <Icon />}
                    <input type="hidden" name="form-name" value="removeClass" />
                    <b class="xl:text-md truncate flex-[6]">{c.name}</b>
                    <p class="flex-[2]">{c.id}</p>
                    <button type="submit" class="cursor-pointer flex-1">
                      <IconTrash color="red" />
                    </button>
                    <input type="hidden" name="id" value={c.id} />
                  </form>
                );
              })
            }
            <form
              method="post"
              id="form-addClass"
              name="addClass"
              class="flex flex-col gap-2 border dark:border-gray-700 rounded p-4"
              style={"display:none;"}
            >
              <input type="hidden" name="form-name" value="addClass" />
              <label class="flex flex-col gap-1">
                Nombre
                <input
                  name="name"
                  type="text"
                  class="bg-gray-100 dark:bg-gray-900"
                />
              </label>
              <label class="flex flex-col gap-1">
                Código
                <input
                  name="id"
                  type="text"
                  class="bg-gray-100 dark:bg-gray-900"
                />
              </label>
              <p>Icono</p>
              <div class="p-2 rounded bg-gray-100 dark:bg-gray-900 mr-auto w-full max-w-[25rem]" id="scrollbar">
                <IconListSelector slot="content" />
              </div>
              <div class="justify-end flex gap-2 mt-3">
                <button
                  type="submit"
                  class="w-1/3 xl:w-1/4 p-2 bg-blue-400 rounded font-semibold text-white dark:saturate-80 dark:brightness-90"
                >
                  <p>Guardar</p>
                </button>
                <button
                  onclick="hideForm()"
                  type="reset"
                  class="w-1/3 xl:w-1/4 p-2 bg-red-400 rounded font-semibold text-white dark:saturate-80 dark:brightness-90"
                >
                  <p>Cancelar</p>
                </button>
              </div>
            </form>
            <div
              onclick="showForm()"
              class="p-2 flex gap-4 items-center justify-between hover:bg-gray-50 transition-colors dark:hover:bg-gray-900 rounded cursor-pointer select-none"
            >
              <p class="text-gray-600">Agregar Nueva clase</p>
              <IconCirclePlus color="rgb(75 85 99 / .5)" />
            </div>
          </div>
        </div>
      </SimpleCard>
      <b>Exportar/Importar configuración</b>
      <SimpleCard>
        <div class="flex flex-col gap-2" slot="content">
          <p>
            Descarga la configuración, accesos directos y clases guardadas que
            hayas configurado, luego podrás importarlo en otros dispositivos.
          </p>
          <button
            onclick="downloadSettings()"
            class="flex items-center justify-center gap-3 p-2 mx-auto rounded w-1/2 xl:w-1/3 bg-gray-200 dark:bg-gray-900 transition-colors hover:bg-sky-200"
          >
            <IconDownload />
            Descargar</button
          >
          <p>Recupera datos guardados/epxortados desde otro dispositivo.</p>
          <label
            class="flex items-center justify-center gap-3 p-2 text-center mx-auto rounded w-1/2 xl:w-1/3 bg-gray-200 dark:bg-gray-900 transition-colors hover:bg-sky-200"
          >
            <IconUpload />
            Importar
            <input
              id="import-input"
              type="file"
              onchange="importSettings()"
              accept="application/JSON"
              style="display:none;"
            />
          </label>
        </div>
      </SimpleCard>
    </div>
  </div>
</Base>
